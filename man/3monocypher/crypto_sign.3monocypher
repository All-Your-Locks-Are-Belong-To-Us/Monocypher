.Dd August 26, 2017
.Dt CRYPTO_SIGN 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_sign ,
.Nm crypto_check ,
.Nm crypto_sign_public_key
.Nd public key signatures
.Sh SYNOPSIS
.In monocypher.h
.Ft void
.Fo crypto_sign
.Fa "uint8_t signature[64]"
.Fa "const uint8_t secret_key[32]"
.Fa "const uint8_t public_key[32]"
.Fa "const uint8_t *message"
.Fa "size_t message_size"
.Fc
.Ft void
.Fo crypto_sign_public_key
.Fa "uint8_t public_key[32]"
.Fa "const uint8_t secret_key[32]"
.Fc
.Ft int
.Fo crypto_check
.Fa "const uint8_t signature[64]"
.Fa "const uint8_t public_key[32]"
.Fa "const uint8_t *message"
.Fa "size_t message_size"
.Fc
.Sh DESCRIPTION
Authenticated encryption with key exchange is not always enough.
Sometimes, you want to
.Em broadcast
a signature, in such a way that
.Em everybody
can verify.
.Pp
When you sign a message with your private key, anybody who knows your
public key can verify that you signed the message.
Obviously, any attacker that gets a hold of your private key can sign
messages in your stead.
Protect your private key.
.Pp
The keys used for these functions are
.Em not
the same as used for
.Xr crypto_key_exchange 3monocypher .
There are ways to convert keys from signing keys to X25519 keys,
but those are not covered by Monocypher.
.Pp
The
.Fn crypto_sign_public_key
function deterministically computes a public key from the specified
secret key.
Make sure the secret key is randomly selected.
Refer to
.Xr intro 3monocypher
for details about random number generation (use your operating system's
random number generator).
.Pp
The
.Fn crypto_sign
function signs a message with your secret key
.Fa secret_key .
The public key is optional, and will be recomputed if not provided.
However, this doubles execution time.
.Pp
The
.Fn crypto_check
function checks that a given signature is genuine.
Of course, if an attacker gets a hold of the matching private key,
no security guarantees can be made anymore.
This function does
.Em not
run in constant time.
It does not have to in most threat models, because nothing is secret:
everyone knows the public key, and the signature and message are
rarely secret.
If you want to ascertain the origin of a secret message, you may want
to use the
.Xr crypto_key_exchange 3monocypher
function instead.
.Pp
An incremental interface is not available.
If you require an incremental interface, signing a hash of your data
is an acceptable substitute; see
.Xr crypto_blake2b_init 3monocypher
for details about incrementally hashing data.
.Sh RETURN VALUES
The
.Fn crypto_sign_public_key
and
.Fn crypto_sign
functions return nothing.
They cannot fail.
.Pp
The
.Fn crypto_check
function returns zero for legitimate messages and -1 for forgeries.
.Sh EXAMPLES
This example shows how to generate a private key and a public key.
.Bd -literal -offset indent
uint8_t sk[32], pk[32];

/* ...randomly generate sk here... */
crypto_sign_public_key(pk, sk);
.Ed
.Sh SEE ALSO
.Xr crypto_blake2b 3monocypher ,
.Xr crypto_key_exchange 3monocypher ,
.Xr crypto_lock 3monocypher ,
.Xr intro 3monocypher
.Sh IMPLEMENTATION DETAILS
These functions provide public key signatures with a variant of Ed25519,
which uses Blake2b as the hash instead of SHA-512.
SHA-512 is provided as an option for compatibility with other systems.
.Pp
Blake2b is the default because it is faster, more flexible, harder to
misuse than SHA-512, and already required by
.Xr crypto_argon2i 3monocypher .
Monocypher needs only one hash function, and that shall be Blake2b.
.Pp
Note that using Blake2b instead of SHA-512 does
.Em not
block your upgrade path to faster implementations: Floodyberry's Donna
(ed25519-donna) library provides blazing fast implementations that can
work with custom hashes.
.Pp
The reason why there is a SHA-512 option at all is due to official test
vectors.
.Pp
There is no incremental interface because EdDSA requires the full
message to be hashed twice in a way that makes parallel hashing
impossible.
Workarounds for providing an incremental interface would involve
lowering the security guarantees of the underlying hash function or
would introduce grave potential for misuse, likely leading to situations
such as the Sony PlayStation EdDSA nonce randomization failure.
For this reason, an incremental interface has not been provided.
