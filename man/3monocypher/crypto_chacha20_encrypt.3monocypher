.Dd August 26, 2017
.Dt CRYPTO_CHACHA20_ENCRYPT 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_chacha20_encrypt ,
.Nm crypto_chacha20_init ,
.Nm crypto_chacha20_x_init ,
.Nm crypto_chacha20_stream ,
.Nm crypto_chacha20_set_ctr
.Nd Chacha20 encryption
.Sh SYNOPSIS
.In monocypher.h
.Ft void
.Fo crypto_chacha20_encrypt
.Fa "crypto_chacha_ctx *ctx"
.Fa "uint8_t *cipher_text"
.Fa "const uint8_t *plain_text"
.Fa "size_t text_size"
.Fc
.Ft void
.Fo crypto_chacha20_init
.Fa "crypto_chacha_ctx *ctx"
.Fa "const uint8_t key[32]"
.Fa "const uint8_t nonce[8]"
.Fc
.Ft void
.Fo crypto_chacha20_x_init
.Fa "crypto_chacha_ctx *ctx"
.Fa "const uint8_t key[32]"
.Fa "const uint8_t nonce[24]"
.Fc
.Ft void
.Fo crypto_chacha20_encrypt
.Fa "crypto_chacha_ctx *ctx"
.Fa "uint8_t *cipher_text"
.Fa "const uint8_t *plain_text"
.Fa "size_t text_size"
.Fc
.Ft void
.Fo crypto_chacha20_stream
.Fa "crypto_chacha_ctx *ctx"
.Fa "uint8_t *stream"
.Fa "size_t size"
.Fc
.Ft void
.Fo crypto_chacha20_set_ctr
.Fa "crypto_chacha_ctx *ctx"
.Fa "uint64_t ctr"
.Fc
.Sh DESCRIPTION
These functions provides an incremental interface for Chacha20, with an
initialisation, and as many encryption steps as you want.
.Pp
To use these functions, you must first initialize a
.Vt crypto_chacha_ctx
using
.Fn crypto_chacha20_init
or
.Fn crypto_chacha20_x_init .
When using the former,
.Em do not select the nonce at random, use a counter instead .
When using the latter, select the nonce at random.
See
.Xr intro 3monocypher
about generating random numbers (use the operating system's random
number generator).
The initialization routine
.Fn crypto_chacha20_x_init
is a tiny bit slower \(en though that is irrelevant in practice.
.Pp
The
.Fn crypto_chacha20_encrypt
function encrypts the
.Fa plain_text
by XORing it with a pseudo-random stream of
numbers, seeded by the provided
.Vt crypto_chacha_ctx .
Decryption is the same operation as encryption.
Once the context is initialised, encryption can safely be chained thus:
.Bd -literal -offset indent
    crypto_encrypt_chacha20(ctx, plain_0, cipher_0, length_0);
    crypto_encrypt_chacha20(ctx, plain_1, cipher_1, length_1);
    crypto_encrypt_chacha20(ctx, plain_2, cipher_2, length_2);
.Ed
The input
.Fa plain_text
and the output
.Fa cipher_text
may point to the same location, for in-place encryption.
The input
.Fa plain_text
is allowed to be
.Dv NULL
(0), in which case it will be interpreted as an all zero input.
The cipher_text will then contain the raw Chacha20 stream.
.Pp
The
.Fn crypto_chacha20_stream
function is provided for convenience.
It is the same as
.Fn crypto_chacha20_encrypt
with
.Fa plain_text
being
.Dv NULL .
This is useful as a user space random number generator.
Do not use this as a cryptographic random number generator.
Still, this function can be used outside of a security context:
deterministic procedural generation comes to mind.
.Pp
The
.Fn crypto_chacha20_set_ctr
function resets the internal counter of the Chacha context to the value
specified in
.Fa ctr .
Resuming the encryption will use the stream at the
block
.Fa ctr
(which is the byte
.Ql ctr \(mu 64 ) .
This can be used to encrypt (or decrypt) part of a long message, or to
implement some AEAD constructions such as the one described in RFC 7539
(not implemented in Monocypher because of its complexity and
limitations).
.Sh RETURN VALUES
These functions return nothing.
They cannot fail.
.Sh SEE ALSO
.Xr crypto_lock 3monocypher ,
.Xr intro 3monocypher
.Sh CAVEATS
.Sy Encryption alone is not sufficient for security .
Using Chacha20 directly is therefore discouraged.
Use authenticated encryption instead; see
.Xr crypto_lock 3monocypher .
.Pp
When using
.Fn crypto_chacha20_init ,
.Sy do not select the nonce at random .
Unlike the authenticated encryption we've seen at the top, this nonce is
only 64 bits in length.
This is too small for random nonces: you might reuse one by sheer
misfortune.
Use a counter instead.
If there are multiple parties sending out messages, you can give them
all an initial nonce of 0, 1 .. n-1 respectively, and have them
increment their nonce by n and make sure the counters never wrap
around.
.Pp
Do not reuse a nonce for the same key.
You would expose the XOR of subsequent encrypted messages, and
destroy confidentiality.
.Pp
Do not use these functions as cryptographic random number generator.
Always use the operating system's random number generator for
cryptographic purposes, see
.Xr intro 3monocypher .
.Sh IMPLEMENTATION DETAILS
These functions implement Chacha20 and XChacha20.
