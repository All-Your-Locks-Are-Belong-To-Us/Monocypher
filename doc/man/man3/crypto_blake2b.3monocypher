.Dd August 26, 2017
.Dt CRYPTO_BLAKE2B 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_blake2b ,
.Nm crypto_blake2b_general ,
.Nm crypto_blake2b_general_init ,
.Nm crypto_blake2b_init ,
.Nm crypto_blake2b_update ,
.Nm crypto_blake2b_final
.Nd cryptographic hashing
.Sh SYNOPSIS
.In monocypher.h
.Ft void
.Fo crypto_blake2b
.Fa "uint8_t hash[64]"
.Fa "uint8_t *message"
.Fa "size_t message_size"
.Fc
.Ft void
.Fo crypto_blake2b_general
.Fa "uint8_t *hash"
.Fa "size_t hash_size"
.Fa "uint8_t *key"
.Fa "size_t key_size"
.Fa "uint8_t *message"
.Fa "size_t message_size"
.Fc
.Ft void
.Fo crypto_blake2b_init
.Fa "crypto_blake2b_ctx *ctx"
.Fc
.Ft void
.Fo crypto_blake2b_general_init
.Fa "crypto_blake2b_ctx *ctx"
.Fa "size_t hash_size"
.Fa "uint8_t *key"
.Fa "size_t key_size"
.Fc
.Ft void
.Fo crypto_blake2b_update
.Fa "crypto_blake2b_ctx *ctx"
.Fa "const uint8_t *message"
.Fa "size_t message_size"
.Fc
.Ft void
.Fo crypto_blake2b_final
.Fa "crypto_blake2b_ctx *ctx"
.Fa "uint8_t *hash"
.Fc
.Sh DESCRIPTION
Blake2b is a fast cryptographically secure hash, based on the ideas of
Chacha20.
It is faster than MD5, yet just as secure as SHA-3.
.Pp
Blake2b is immune to length extension attacks, and as such does not
require any specific precautions, such as using the HMAC algorithm.
It can authenticate messages with a naive approach.
.Pp
The arguments are:
.Bl -tag -width Ds
.It Fa hash
the output hash.
Must have at least
.Fa hash_size
free bytes.
.It Fa hash_size
the length of the output hash.
Must be between 1 and 64.
A value of 64 is recommended.
Values below 32 are discouraged.
.It Fa key
some secret key.
May be
.Dv NULL
if
.Fa key_size
is 0.
This can be used to create a message authentication code (MAC).
Use the
.Xr crypto_verify16 3monocypher ,
.Xr crypto_verify32 3monocypher
or the
.Xr crypto_verify64 3monocypher
function to compare MACs created this way.
Choose
.Fa hash_size
appropriately for the verification functions.
.It Fa key_size
length of the
.Fa key .
Must be between 0 and 64.
.It Fa message
the message to hash.
It may overlap with the
.Fa hash
argument where present.
.It Fa message_size
the length of the message.
.El
.Ss Direct interface
The direct interface sports 2 functions:
.Fn crypto_blake2b
and
.Fn crypto_blake2b_general .
The
.Fn crypto_blake2b
function is provided for convenience.
It uses a 64 byte hash and no key.
These values are good defaults for
.Fn crypto_blake2b_general_init ,
too.
.Pp
If you use the
.Fn crypto_blake2b_general
function, you can specify the size of the hash, and use a secret key to
make the hash unpredictable \(en useful for message authentication
codes.
.Ss Incremental interface
Incremental interfaces are useful to handle streams of data or large
files without using too much memory.
This interface uses 3 steps:
.Bl -bullet
.It
initialisation, where we set up a context with the various hashing
parameters;
.It
update, where we hash the message chunk by chunk, and keep the
intermediary result in the context;
.It
and finalisation, where we produce the final hash.
.El
.Pp
The invariants of the parameters are the same as for
.Fn crypto_blake2b_general .
.Fn crypto_blake2b_init
is a convenience initialisation function that
specifies a 64-byte hash and no key.
This is considered a good default.
.Sh RETURN VALUES
These functions return nothing.
.Sh EXAMPLES
This example shows how to hash the concatenation of 3 chunks using the
incremental interface:
.Bd -literal -offset indent
uint8_t hash[64];
crypto_blake2b_ctx ctx;

crypto_blake2b_init  (&ctx);
crypto_blake2b_update(&ctx, chunk1, chunk1_size);
crypto_blake2b_update(&ctx, chunk2, chunk2_size);
crypto_blake2b_update(&ctx, chunk3, chunk3_size);
crypto_blake2b_final (&ctx, hash);
.Ed
.Sh SEE ALSO
.Xr crypto_key_exchange 3monocypher ,
.Xr crypto_lock 3monocypher ,
.Xr intro 3monocypher
.Sh CAVEATS
Any deviation from the specified input and output length ranges results
in
.Sy undefined behavior .
Make sure your inputs are correct.
.Sh IMPLEMENTATION DETAILS
These functions implement Blake2b.
