.Dd October 14, 2017
.Dt CRYPTO_SIGN_INIT_FIRST_PASS 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_sign_init_first_pass ,
.Nm crypto_sign_update ,
.Nm crypto_sign_final ,
.Nm crypto_sign_init_second_pass ,
.Nm crypto_check_init ,
.Nm crypto_check_update ,
.Nm crypto_check_final
.Nd incremental public key signatures
.Sh SYNOPSIS
.In monocypher.h
.Ft void
.Fo crypto_sign_init_first_pass
.Fa "crypto_sign_ctx *ctx"
.Fa "const uint8_t secret_key[32]"
.Fa "const uint8_t public_key[32]"
.Fc
.Ft void
.Fo crypto_sign_update
.Fa "crypto_sign_ctx *ctx"
.Fa "const uint8_t *message"
.Fa "size_t message_size"
.Fc
.Ft void
.Fo crypto_sign_final
.Fa "crypto_sign_ctx *ctx"
.Fa "uint8_t signature[64]"
.Fc
.Ft void
.Fo crypto_sign_init_second_pass
.Fa "crypto_sign_ctx *ctx"
.Fc
.Ft void
.Fo crypto_check_init
.Fa "crypto_check_ctx *ctx"
.Fa "const uint8_t signature[64]"
.Fa "const uint8_t public_key[32]"
.Fc
.Ft void
.Fo crypto_check_update
.Fa "crypto_check_ctx *ctx"
.Fa "const uint8_t *message"
.Fa "size_t message_size"
.Fc
.Ft int
.Fo crypto_check_final
.Fa "crypto_check_ctx *ctx"
.Fc
.Sh DESCRIPTION
These functions are variants of
.Xr crypto_sign 3monocypher
and
.Xr crypto_check 3monocypher .
Prefer those more simple functions if possible.
.Pp
This incremental interface allows splitting up decryption and
authentication of larger messages too large to fit into a single buffer
or to handle individual pieces of data located in different buffers.
The arguments are the same as described for the direct interface on
.Xr crypto_sign 3monocypher .
.Pp
For signing, this interface uses
.Em five
steps:
.Bl -bullet
.It
initialisation of the first pass, where a context for signing is set up;
.It
update, where the message is processed for the first time;
.It
initialisation of the second pass, where the result from the first pass
is used to prepare the second pass;
.It
update, where the message is processed for the second time;
.It
final, where we generate/check the signature.
.El
.Pp
For verification, this interface uses three steps:
.Bl -bullet
.It
initialization, where a context for verification is set up;
.It
update, where the message is processed;
.It
final, where the signature is actually verified.
.El
.Pp
You do not have to wipe the context structs with
.Xr crypto_wipe 3monocypher .
.Pp
Signatures made with this interface are compatible with the direct
interface and vice-versa.
.Sh RETURN VALUES
.Fn crypto_sign_init_first_pass ,
.Fn crypto_sign_init_second_pass ,
.Fn crypto_sign_update ,
.Fn crypto_sign_final ,
.Fn crypto_check_init
and
.Fn crypto_check_update
return nothing.
They cannot fail.
.Pp
.Fn crypto_check_final
returns zero for legitimate messages and -1 for forgeries.
.Sh EXAMPLES
This example signs a random message and verifies the signature.
.Bd -literal -offset indent
uint8_t sk[32], pk[32], msg[128];

/* ...randomly generate sk and msg here... */
crypto_sign_public_key(pk, sk);

/* Signing */
uint8_t sig[64];
crypto_sign_ctx sctx;
crypto_sign_init_first_pass (&sctx, sk, pk);
/* You can wipe the key from memory as early as this.
 * Obviously, if you still need to sign more messages, do not wipe
 * the secret key yet.
 */
crypto_wipe(sk, sizeof(sk));
crypto_sign_update          (&sctx, msg, sizeof(msg));
crypto_sign_init_second_pass(&sctx);
crypto_sign_update          (&sctx, msg, sizeof(msg));
crypto_sign_final           (&sctx, sig);

/* Verifying */
crypto_check_ctx cctx;
crypto_check_init           (&cctx, sig, pk);
crypto_check_update         (&cctx, msg, sizeof(msg));
int is_valid_sig = (crypto_check_final(&cctx) == 0);
.Ed
.Sh SEE ALSO
.Xr crypto_blake2b 3monocypher ,
.Xr crypto_key_exchange 3monocypher ,
.Xr crypto_lock 3monocypher ,
.Xr crypto_sign 3monocypher ,
.Xr crypto_wipe 3monocypher ,
.Xr intro 3monocypher
.Sh CAVEATS
The same caveats as documented on
.Xr crypto_sign 3monocypher
apply.
.Sh IMPLEMENTATION DETAILS
These functions provide public key signatures with a variant of Ed25519,
which uses Blake2b as the hash instead of SHA-512.
.Pp
Ed25519 is designed as a two-pass algorithm.
See
.Xr crypto_sign 3monocypher
for other details.
