.Dd August 26, 2017
.Dt CRYPTO_POLY1305_AUTH 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_poly1305_auth ,
.Nm crypto_poly1305_init ,
.Nm crypto_poly1305_update ,
.Nm crypto_poly1305_final
.Nd Poly1305 one-time message authentication codes
.Sh SYNOPSIS
.In monocypher.h
.Ft void
.Fo crypto_poly1305_auth
.Fa "uint8_t mac[16]"
.Fa "const uint8_t *message"
.Fa "size_t message_size"
.Fa "const uint8_t key[32]"
.Fc
.Ft void
.Fo crypto_poly1305_init
.Fa "crypto_poly1305_ctx *ctx"
.Fa "const uint8_t key[32]"
.Fc
.Ft void
.Fo crypto_poly1305_update
.Fa "crypto_poly1305_ctx *ctx"
.Fa "const uint8_t *message"
.Fa "size_t message_size"
.Fc
.Ft void
.Fo crypto_poly1305_final
.Fa "crypto_poly1305_ctx *ctx"
.Fa "const uint8_t mac[16]"
.Fc
.Sh DESCRIPTION
Monocypher provides both a direct interface and an incremental
interface for Poly1305, which is used to generate a one-time message
authentication code (MAC).
.Sy Poly1305 is easy to mess up .
Using it directly is likely to lead to mistakes.
.Pp
Be careful when using this function.
The requirements for a Poly1305 key are
.Em stringent :
.Bl -bullet
.It
It must be secret: the attacker cannot be allowed to guess that key.
.It
It must be shared: the recipient must know this key.
Without it, the integrity of the message cannot be verified.
.It
It must
.Sy never
be reused.
That would allow the attacker to recover the key then forge messages,
destroying any security.
.El
.Pp
You cannot use the session key for this: it is secret and shared, but
it is
.Em reused .
If you use it, the attacker will recover it as soon as the second
message is sent, and will break all security.
.Pp
You cannot use a random number: if you do not send it over the network,
it will not be shared, and the recipient will be unable to check the
MAC.
If you do, it will not be secret, and the attacker will be able to forge
messages.
.Pp
The only practical source for the authentication key is a chunk of the
encryption stream used to encrypt the message.
However, you must ensure you do not reuse that part of the stream to
encrypt the message itself:
the attacker could guess the stream by guessing the message, and forge
messages afterwards.
.Pp
To get this right, you need a session key, a
.Em unique
nonce, and a
stream cipher.
Generate a stream with the session key and nonce.
Take the first 32 bits of that stream as your authentication key, then
use the
.Em rest
of the stream to encrypt your message.
Check out the source code of
.Xr crypto_aead_lock 3monocypher
to see how it is done.
.Pp
The direct interface consists of the
.Fn crypto_poly1305_auth
function produces a message authentication code for the given
message and authentication key.
The
.Fa mac
and the
.Fa message
arguments may overlap.
.Pp
The indirect interface consists of the
.Fn crypto_poly1305_init ,
.Fn crypto_poly1305_update ,
and
.Fn crypto_poly1305_final
functions.
The
.Fn crypto_poly1305_init
function initialises a context, and the
.Fn crypto_poly1305_update
function authenticates the message chunk by chunk.
Once the message is entirely processed, the
.Fn crypto_poly1305_final
function yields the message authentication code.
.Pp
Use
.Xr crypto_memcmp 3monocypher
to compare the MAC received to the output
.Fa mac .
.Sh RETURN VALUES
These functions return nothing.
They cannot fail.
.Sh SEE ALSO
.Xr crypto_blake2b 3monocypher ,
.Xr crypto_lock 3monocypher ,
.Xr crypto_memcmp 3monocypher ,
.Xr intro 3monocypher
.Sh CAVEATS
Using Poly1305 correctly is very difficult.
Please do not use it unless you are absolutely sure what you are doing.
Use authenticated encryption instead; see
.Xr crypto_lock 3monocypher .
If you are absolutely certain you do not want encryption, refer to
.Xr crypto_blake2b 3monocypher ,
which contains information on how to use Blake2b to generate message
authentication codes.
.Sh IMPLEMENTATION DETAILS
These functions implement Poly1305.
