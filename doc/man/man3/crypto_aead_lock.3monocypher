.Dd August 25, 2017
.Dt CRYPTO_AEAD_LOCK 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_aead_lock ,
.Nm crypto_aead_unlock
.Nd authenticated encryption with additional data
.Sh SYNOPSIS
.In monocypher.h
.Ft void
.Fo crypto_aead_lock
.Fa "uint8_t mac[16]"
.Fa "uint8_t *cipher_text"
.Fa "const uint8_t key[32]"
.Fa "const uint8_t nonce[24]"
.Fa "const uint8_t *ad"
.Fa "size_t ad_size"
.Fa "const uint8_t *plain_text"
.Fa "size_t text_size"
.Fc
.Ft int
.Fo crypto_aead_unlock
.Fa "uint8_t *plain_text"
.Fa "const uint8_t key[32]"
.Fa "const uint8_t nonce[24]"
.Fa "const uint8_t mac[16]"
.Fa "const uint8_t *ad"
.Fa "size_t ad_size"
.Fa "const uint8_t *cipher_text"
.Fa "size_t text_size"
.Fc
.Sh DESCRIPTION
These functions are variants of
.Xr crypto_lock 3monocypher
and
.Xr crypto_unlock 3monocypher ,
permitting additional data.
Additional data is authenticated, but
.Em not
encrypted.
.Pp
.Bf Em
Note: using these functions is discouraged:
if the data you are transmitting is worth authenticating, it is probably
worth encrypting as well.
Do so if you can, using
.Xr crypto_lock 3monocypher
and
.Xr crypto_unlock 3monocypher .
.Ef
.Pp
If you must send unencrypted data, remember that you cannot trust
unauthenticated data,
.Em including the length of the additional data .
If you transmit that length over the wire, you must authenticate it.
(The easiest way to do so is to append that length to the additional
data before you call
.Fn crypto_aead_lock
or
.Fn crypto_aead_unlock ) .
Otherwise, an attacker could provide a false length, effectively moving
the boundary between the additional data and the ciphertext or possibly
causing buffer overflows.
If however the length of the additional data is implicit (fixed size)
or self-contained (such as length appending or null termination), you do
not need to authenticate it explicitly.
.Pp
The
.Fn crypto_aead_lock
function encrypts and authenticates a plaintext and authenticates
additional data.
It can be decrypted by the
.Fn crypto_aead_unlock
function.
Arguments that are already documented in
.Xr crypto_lock 3monocypher
will not be repeated here.
The arguments are:
.Bl -tag -width Ds
.It Fa ad
additional data.
This can be any arbitrary byte sequence.
It will not be encrypted.
.It Fa ad_size
length of the additional data.
.El
.Pp
If
.Fa ad
is
.Dv NULL
and
.Fa ad_size
is zero, these functions behave like
.Xr crypto_lock 3monocypher
and
.Xr crypto_unlock 3monocypher .
This can be useful if your protocol somehow requires you to
send unencrypted data.
.Pp
Unlocking proceeds in two steps: first, we authenticate the ciphertext
and additional data with the provided MAC.
If it has been corrupted, the
.Fn crypto_aead_unlock
function returns immediately,
without decrypting the message.
If the message is genuine, the
.Fn crypto_aead_unlock
function decrypts the ciphertext.
.Em Always check the return value .
.Sh RETURN VALUES
The
.Fn crypto_aead_lock
function returns nothing.
It cannot fail.
The
.Fn crypto_aead_unlock
function returns 0 on success or -1 if the message was corrupted (i.e.
.Fa mac
mismatched the combination of
.Fa key ,
.Fa nonce ,
.Fa ad
and
.Fa cipher_text ) .
Corruption can happen because of transmission errors, programmer error
(e.g. failed to parse the protocol properly and thus supplied only part
of the expected
.Fa ad
or
.Fa cipher_text )
or an attacker's interference.
.Sh SEE ALSO
.Xr crypto_key_exchange 3monocypher ,
.Xr crypto_lock 3monocypher ,
.Xr crypto_unlock 3monocypher ,
.Xr intro 3monocypher
.Sh IMPLEMENTATION DETAILS
These functions do not authenticate the length themselves for
simplicity, compatibility, and efficiency reasons:
most of the time, the length of the additional data is either fixed or
self-contained, and thus outside of attacker control.
It also makes them compatible with
.Xr crypto_lock 3monocypher
and
.Xr crypto_unlock 3monocypher
when the size of the additional data is zero, and simplifies the
implementation.
