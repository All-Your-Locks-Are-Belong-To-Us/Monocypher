.Dd August 26, 2017
.Dt CRYPTO_KEY_EXCHANGE 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_key_exchange ,
.Nm crypto_x25519_public_key
.Nd Elliptic Curve Diffie-Hellman key exchange
.Sh SYNOPSIS
.In monocypher.h
.Ft int
.Fo crypto_key_exchange
.Fa "uint8_t shared_key[32]"
.Fa "const uint8_t your_secret_key[32]"
.Fa "const uint8_t their_public_key[32]"
.Fc
.Ft void
.Fo crypto_x25519_public_key
.Fa "uint8_t public_key[32]"
.Fa "const uint8_t secret_key[32]"
.Fc
.Sh DESCRIPTION
.Fn crypto_key_exchange
computes a shared key with your secret key and their public key,
suitable for use with the
.Xr crypto_lock 3monocypher
family of functions.
.Pp
.Fn crypto_x25519_public_key
deterministically computes the public key from a random secret key.
See
.Xr intro 3monocypher
for advice about generating random bytes (use the operating system's
random number generator).
.Pp
.Sh RETURN VALUES
Some public keys force the shared key to a known constant.
.Fn crypto_key_exchange
returns -1 if it detects such a public key, otherwise it returns 0.
This never happens with legitimate public keys, but if the ones you
process are not known to be trustworthy, check the return value.
.Pp
.Fn crypto_x25519_public_key
returns nothing.
It cannot fail.
.Sh EXAMPLES
Generate a public key from a randomly generated secret key:
.Bd -literal -offset indent
const uint8_t sk[32]; /* Random secret key */
uint8_t       pk[32]; /* Public key        */
crypto_x25519_public_key(pk, sk);
/* Wipe secrets if they are no longer needed */
crypto_wipe(sk, 32);
.Ed
.Pp
Generate a shared, symmetric key with your secret key and their public
key.
(The other party will generate the same shared key with your public
key and their secret key.)
.Bd -literal -offset indent
const uint8_t their_pk  [32]; /* Their public key   */
const uint8_t your_sk   [32]; /* Your secret key    */
uint8_t       shared_key[32]; /* Shared session key */
if (crypto_key_exchange(shared_key, your_sk, their_pk) != 0) {
    /* Their public key is malicious. */
    /* The exchange must be aborted.  */
}
/* Wipe secrets if they are no longer needed */
crypto_wipe(your_sk, 32);
.Ed
.Sh SEE ALSO
.Xr crypto_lock 3monocypher ,
.Xr intro 3monocypher
.Sh STANDARDS
These functions implement X25519, described in RFC 7748.
.Fn crypto_key_exchange
uses HChacha20 as well.
.Sh SECURITY CONSIDERATIONS
If either of the long term secret keys leaks, it may compromise
.Em all past messages .
Users who want forward secrecy need to generate temporary public keys,
send them to one another, (use
.Xr crypto_lock 3monocypher
to authenticate them), and compute a shared secret with those
temporary keys.
