.Dd August 26, 2017
.Dt CRYPTO_KEY_EXCHANGE 3MONOCYPHER
.Os
.Sh NAME
.Nm crypto_key_exchange ,
.Nm crypto_x25519_public_key ,
.Nm crypto_x25519
.Nd Elliptic Curve Diffie-Hellman key exchange
.Sh SYNOPSIS
.In monocypher.h
.Ft int
.Fo crypto_key_exchange
.Fa "uint8_t shared_key[32]"
.Fa "const uint8_t your_secret_key[32]"
.Fa "const uint8_t their_public_key[32]"
.Fc
.Ft void
.Fo crypto_x25519_public_key
.Fa "uint8_t public_key[32]"
.Fa "const uint8_t secret_key[32]"
.Fc
.Ft int
.Fo crypto_x25519
.Fa "uint8_t raw_shared_secret[32]"
.Fa "const uint8_t your_secret_key[32]"
.Fa "const uint8_t their_public_key[32]"
.Fc
.Sh DESCRIPTION
The
.Fn crypto_key_exchange
function computes a shared key with your secret key and their public
key, suitable for the
.Xr crypto_lock 3monocypher
family of functions.
It performs an X25519 key exchange, then hashes the shared secret with
HChacha20 to get a suitably random shared key.
.Pp
The
.Fn crypto_x25519_public_key
function eterministically computes the public key from a random
.Fa secret_key .
See
.Xr intro 3monocypher
about generating random bytes (use the operating system's random
number generator).
.Pp
The
.Fn crypto_x25519
function computes a shared secret with
.Fa your_secret_key
and
.Fa their_public_key .
.Sy Warning: the shared secret is not cryptographically random .
Do not use it directly as a session key.
Hash it first with
.Xr crypto_chacha20_H
or
.Xr crypto_blake2b .
.Sh RETURN VALUES
The
.Fn crypto_key_exchange
and
.Fn crypto_x25519
functions return zero on success, or -1 on failure.
The return value serves as a security check: some public keys force
the shared key to a known constant.
This never happens with legitimate public keys, but if the ones you
process are not known to be trustworthy, check the return value.
.Pp
The
.Fn crypto_x25519_public_key
function returns nothing.
It cannot fail.
.Sh EXAMPLES
Generate a public key from a randomly generated secret key:
.Bd -literal -offset indent
const uint8_t sk[32]; /* Random secret key */
uint8_t       pk[32]; /* Public key        */
crypto_x25519_public_key(pk, sk);
/* Wipe secrets if they are no longer needed */
crypto_wipe(sk, 32);
.Ed
.Pp
Generate a shared, symmetric key with your secret key and their public
key.
(The other party will generate the same shared key with your public
key and their secret key.)
.Bd -literal -offset indent
const uint8_t their_pk  [32]; /* Their public key   */
const uint8_t your_sk   [32]; /* Your secret key    */
uint8_t       shared_key[32]; /* Shared session key */
if (crypto_key_exchange(shared_key, your_sk, their_pk) != 0) {
    /* Their public key is evil.     */
    /* The exchange must be aborted. */
}
/* Wipe secrets if they are no longer needed */
crypto_wipe(your_sk, 32);
.Ed
.Pp
Generate
.Em two
shared keys with your secret key and their public key.
(This can help nonce management for full duplex communications.)
.Bd -literal -offset indent
const uint8_t their_pk     [32]; /* Their public key          */
const uint8_t your_sk      [32]; /* Your secret key           */
uint8_t       shared_secret[32]; /* Shared secret (NOT a key) */
if (crypto_x25519(shared_secret, your_sk, their_pk) != 0) {
    /* Their public key is evil.     */
    /* The exchange must be aborted. */
}
/* Wipe secrets if they are no longer needed */
crypto_wipe(your_sk, 32);

uint8_t shared_keys[64];           /* Two shared session keys  */
uint8_t *key_1 = shared_keys;      /* Shared key 1             */
uint8_t *key_2 = shared_keys + 32; /* Shared key 2             */
crypto_blake2b(shared_keys, shared_secret, 32);
crypto_wipe(shared_secret, 32);    /* wipe the unneeded secret */
.Ed
.Sh SEE ALSO
.Xr crypto_lock 3monocypher ,
.Xr intro 3monocypher
.Sh STANDARDS
These functions implement X25519, described in RFC 7748.
The
.Fn crypto_key_exchange
function uses HChacha20 as well.
.Sh SECURITY CONSIDERATIONS
If either of the long term secret keys leaks, it
may compromise
.Em all past messages .
Users who want forward secrecy need to generate temporary public keys,
send them to one another, (use
.Xr crypto_lock 3monocypher
to authenticate them), and compute a shared secret with those
temporary keys.
.Sh IMPLEMENTATION DETAILS
The most significant bit of the public key is systematically ignored.
It is not needed because every public key should be smaller than
2^255-19, which fits in 255 bits.
If another implementation of X25519 gives you a key that's not fully
reduced and has its high bit set, the computation will fail.
On the other hand, it also means you may use this bit for other purposes
(such as parity flipping for Ed25519 compatibility).
